// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get displayedOffers(): Array<string> | null {
    let value = this.get("displayedOffers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set displayedOffers(value: Array<string> | null) {
    if (!value) {
      this.unset("displayedOffers");
    } else {
      this.set("displayedOffers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get definedOffers(): Array<string> | null {
    let value = this.get("definedOffers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set definedOffers(value: Array<string> | null) {
    if (!value) {
      this.unset("definedOffers");
    } else {
      this.set("definedOffers", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class DisplayedOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DisplayedOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DisplayedOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DisplayedOffer", id.toString(), this);
    }
  }

  static load(id: string): DisplayedOffer | null {
    return changetype<DisplayedOffer | null>(store.get("DisplayedOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value!.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get nftContractAddresses(): Array<Bytes> | null {
    let value = this.get("nftContractAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set nftContractAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("nftContractAddresses");
    } else {
      this.set(
        "nftContractAddresses",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }

  get nftTokenIds(): Array<BigInt> | null {
    let value = this.get("nftTokenIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftTokenIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("nftTokenIds");
    } else {
      this.set("nftTokenIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get pouchContractAddresses(): Array<Bytes> | null {
    let value = this.get("pouchContractAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set pouchContractAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("pouchContractAddresses");
    } else {
      this.set(
        "pouchContractAddresses",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }

  get pouchValues(): Array<BigInt> | null {
    let value = this.get("pouchValues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set pouchValues(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("pouchValues");
    } else {
      this.set("pouchValues", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get receivedOffers(): Array<string> | null {
    let value = this.get("receivedOffers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set receivedOffers(value: Array<string> | null) {
    if (!value) {
      this.unset("receivedOffers");
    } else {
      this.set("receivedOffers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get acceptedOffer(): string | null {
    let value = this.get("acceptedOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set acceptedOffer(value: string | null) {
    if (!value) {
      this.unset("acceptedOffer");
    } else {
      this.set("acceptedOffer", Value.fromString(<string>value));
    }
  }
}

export class DefinedOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DefinedOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DefinedOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DefinedOffer", id.toString(), this);
    }
  }

  static load(id: string): DefinedOffer | null {
    return changetype<DefinedOffer | null>(store.get("DefinedOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value!.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get nftContractAddresses(): Array<Bytes> | null {
    let value = this.get("nftContractAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set nftContractAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("nftContractAddresses");
    } else {
      this.set(
        "nftContractAddresses",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }

  get nftTokenIds(): Array<BigInt> | null {
    let value = this.get("nftTokenIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftTokenIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("nftTokenIds");
    } else {
      this.set("nftTokenIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get pouchContractAddresses(): Array<Bytes> | null {
    let value = this.get("pouchContractAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set pouchContractAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("pouchContractAddresses");
    } else {
      this.set(
        "pouchContractAddresses",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }

  get pouchValues(): Array<BigInt> | null {
    let value = this.get("pouchValues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set pouchValues(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("pouchValues");
    } else {
      this.set("pouchValues", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get displayedOffer(): string {
    let value = this.get("displayedOffer");
    return value!.toString();
  }

  set displayedOffer(value: string) {
    this.set("displayedOffer", Value.fromString(value));
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    return value!.toBoolean();
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }
}
